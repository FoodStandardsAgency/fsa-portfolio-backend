using AutoMapper;
using FSAPortfolio.Entities;
using FSAPortfolio.Entities.Organisation;
using FSAPortfolio.Entities.Projects;
using FSAPortfolio.WebAPI.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Web;

namespace FSAPortfolio.WebAPI.Mapping.Projects.Resolvers
{
    public class ProjectDataInboundResolver : IValueResolver<ProjectUpdateModel, Project, ICollection<ProjectDataItem>>
    {
        /// <summary>
        /// Unmapped <see cref="ProjectUpdateModel"/> properties
        /// </summary>
        internal static readonly Dictionary<string, PropertyInfo> unmappedProperties;
        static ProjectDataInboundResolver()
        {
            var unmappedToProject = PortfolioMapper.GetUnmappedSourceMembers<ProjectUpdateModel, Project>(PortfolioMapper.projectConfig);
            var unmappedToUpdate = PortfolioMapper.GetUnmappedSourceMembers<ProjectUpdateModel, ProjectUpdateItem>(PortfolioMapper.projectConfig);
            unmappedProperties = unmappedToProject.Intersect(unmappedToUpdate).ToDictionary(p => p.Name);
        }

        public ICollection<ProjectDataItem> Resolve(ProjectUpdateModel source, Project destination, ICollection<ProjectDataItem> destMember, ResolutionContext context)
        {
            var labels = destination.Reservation.Portfolio.Configuration.Labels;
            var portfolioContext = context.Items[nameof(PortfolioContext)] as PortfolioContext;
            var dataItems = destMember?.ToList() ?? new List<ProjectDataItem>();
            foreach (var label in labels)
            {
                ProjectDataItem dataValue = null;
                if (label.FieldType != PortfolioFieldType.Auto && (label.Flags & (PortfolioFieldFlags.ProjectData | PortfolioFieldFlags.NotModelled)) != 0) // Ignore autogenerated fields
                {
                    var dataItem = dataItems?.SingleOrDefault(i => i.Label.Id == label.Id);
                    if (label.Flags.HasFlag(PortfolioFieldFlags.NotModelled))
                    {
                        if (source.Properties != null)
                        {
                            ProjectPropertyModel projectProperty = null;
                            source.Properties.TryGetValue(label.FieldName, out projectProperty);
                            if (!string.IsNullOrWhiteSpace(projectProperty?.ProjectDataValue))
                            {
                                dataValue = new ProjectDataItem() { Label = label, Value = projectProperty.ProjectDataValue };
                            }
                        }
                    }
                    else
                    {
                        PropertyInfo property;
                        if (unmappedProperties.TryGetValue(label.FieldName, out property))
                        {
                            var value = property.GetValue(source);
                            if (value != null && !value.Equals(string.Empty))
                            {
                                dataValue = new ProjectDataItem() { Label = label, Value = JsonConvert.SerializeObject(value) };
                            }
                        }
                    }

                    if (dataValue != null)
                    {
                        // Add or set the value
                        if (dataItem == null)
                        {
                            dataItem = new ProjectDataItem() { Label = dataValue.Label };
                            dataItems.Add(dataItem);
                        }
                        dataItem.Value = dataValue.Value;
                    }
                    else if (dataItem != null)
                    {
                        // Remove the data
                        dataItems.Remove(dataItem);
                        portfolioContext.ProjectDataItems.Remove(dataItem);
                    }
                }
            }
            return dataItems;
        }
    }

    public class ProjectModelOutboundMapper<T> : IMappingAction<Project, T>
        where T : ProjectModel
    {
        /// <summary>
        /// Unmapped <see cref="ProjectModel"/> properties
        /// </summary>
        internal static readonly Dictionary<string, PropertyInfo> unmappedProperties;
        static ProjectModelOutboundMapper()
        {
            var unmappedToProject = PortfolioMapper.GetUnmappedDestinationMembers<Project, T>(PortfolioMapper.projectConfig);
            unmappedProperties = unmappedToProject.ToDictionary(p => p.Name);
        }
        public void Process(Project source, T destination, ResolutionContext context)
        {
            // Project data properties
            foreach (var dataItem in source.ProjectData)
            {
                PropertyInfo property;
                if (unmappedProperties.TryGetValue(dataItem.Label.FieldName, out property))
                {
                    property.SetValue(destination, JsonConvert.DeserializeObject(dataItem.Value, property.PropertyType));
                }
            }
        }

    }

    public class ProjectEditViewModelOutboundMapper : IMappingAction<Project, ProjectEditViewModel>
    {
        public void Process(Project source, ProjectEditViewModel destination, ResolutionContext context)
        {
            // Unmodelled properties
            var unmodelledPropertiesQuery = from l in source.Reservation.Portfolio.Configuration.Labels
                                            where l.Flags.HasFlag(PortfolioFieldFlags.NotModelled)
                                            join d in source.ProjectData on l.Id equals d.Label_Id into unmd
                                            from d in unmd.DefaultIfEmpty()
                                            select new ProjectPropertyModel() { FieldName = l.FieldName, ProjectDataValue = d?.Value };

            destination.Properties = unmodelledPropertiesQuery.ToList();
        }
    }
}